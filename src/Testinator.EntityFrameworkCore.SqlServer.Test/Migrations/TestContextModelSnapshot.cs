// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using MobileTransaction.Domain;

namespace Testinator.EntityFrameworkCore.SqlServer.Test.Migrations
{
    [DbContext(typeof(TestContext))]
    partial class TestContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-preview1-28290")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Testinator.EntityFrameworkCore.SqlServer.Test.Domain.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.SeedData(new[]
                    {
                        new { Id = 1, Description = "Blue Widgets" },
                        new { Id = 2, Description = "Red Widgets" },
                        new { Id = 3, Description = "Other Widgets" }
                    });
                });

            modelBuilder.Entity("Testinator.EntityFrameworkCore.SqlServer.Test.Domain.Models.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Stores");

                    b.SeedData(new[]
                    {
                        new { Id = 1, Address = "1 Credibility Street, Upper Whingeing", Name = "The Widget Haus" },
                        new { Id = 2, Address = "On every street corner", Name = "Widgets R Us" },
                        new { Id = 3, Address = "23 Red Street", Name = "Red Widget Specialists" }
                    });
                });

            modelBuilder.Entity("Testinator.EntityFrameworkCore.SqlServer.Test.Domain.Models.StoreWidget", b =>
                {
                    b.Property<int>("StoreId");

                    b.Property<int>("WidgetId");

                    b.HasKey("StoreId", "WidgetId");

                    b.HasIndex("WidgetId");

                    b.ToTable("StoreWidget");

                    b.SeedData(new[]
                    {
                        new { StoreId = 1, WidgetId = 1 },
                        new { StoreId = 1, WidgetId = 2 },
                        new { StoreId = 2, WidgetId = 2 },
                        new { StoreId = 2, WidgetId = 3 },
                        new { StoreId = 2, WidgetId = 4 },
                        new { StoreId = 3, WidgetId = 2 }
                    });
                });

            modelBuilder.Entity("Testinator.EntityFrameworkCore.SqlServer.Test.Domain.Models.Widget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CategoryId");

                    b.Property<string>("Description");

                    b.Property<decimal>("Price");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Widgets");

                    b.SeedData(new[]
                    {
                        new { Id = 1, CategoryId = 1, Description = "Blue with Spots", Price = 1.0m },
                        new { Id = 2, CategoryId = 1, Description = "Blue with Lines", Price = 1.0m },
                        new { Id = 3, CategoryId = 2, Description = "Red all over", Price = 1.0m },
                        new { Id = 4, CategoryId = 3, Description = "Green and Purple", Price = 1.0m }
                    });
                });

            modelBuilder.Entity("Testinator.EntityFrameworkCore.SqlServer.Test.Domain.Models.StoreWidget", b =>
                {
                    b.HasOne("Testinator.EntityFrameworkCore.SqlServer.Test.Domain.Models.Store", "Store")
                        .WithMany("StoreWidgets")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Testinator.EntityFrameworkCore.SqlServer.Test.Domain.Models.Widget", "Widget")
                        .WithMany("StoreWidgets")
                        .HasForeignKey("WidgetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Testinator.EntityFrameworkCore.SqlServer.Test.Domain.Models.Widget", b =>
                {
                    b.HasOne("Testinator.EntityFrameworkCore.SqlServer.Test.Domain.Models.Category", "Category")
                        .WithMany("Widgets")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
